1. Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'.

SELECT SUM(city.population)
FROM city
JOIN country
ON CITY.countrycode = COUNTRY.code
WHERE country.continent = 'Asia';

2. Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.

SELECT city.name
FROM city
JOIN country
ON CITY.countrycode = COUNTRY.code
WHERE country.continent = 'Africa';

3. Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) 
and their respective average city populations (CITY.Population) rounded down to the nearest integer.

SELECT country.continent, FLOOR(AVG(city.population))
FROM city
JOIN country
ON CITY.countrycode = COUNTRY.code
GROUP BY country.continent;

4.Ketty gives Eve a task to generate a report containing three columns:
Name, Grade and Mark. Ketty doesn't want the NAMES of those students who received a grade lower than 8. 
The report must be in descending order by grade -- i.e. higher grades are entered first. 
If there is more than one student with the same grade (8-10) assigned to them, order those particular students by their name alphabetically. 
Finally, if the grade is lower than 8, use "NULL" as their name and list them by their grades in descending order. 
If there is more than one student with the same grade (1-7) assigned to them, order those particular students by their marks in ascending order.

SELECT IF(grade < 8, null, name), grade, marks
FROM students
JOIN grades
WHERE marks BETWEEN min_mark AND max_mark
ORDER BY grade DESC, name;

5. Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! 
Write a query to print the respective hacker_id and name of hackers who achieved full scores for more than one challenge.
Order your output in descending order by the total number of challenges in which the hacker earned a full score. 
If more than one hacker received full scores in same number of challenges, then sort them by ascending hacker_id.

SELECT h.hacker_id, h.name
FROM submissions AS s
JOIN challenges AS c
ON c.challenge_id = s.challenge_id
JOIN difficulty AS d
ON d.difficulty_level = c.difficulty_level
JOIN hackers AS h
ON s.hacker_id = h.hacker_id
WHERE s.score = d.score AND c.difficulty_level = d.difficulty_level
GROUP BY h.hacker_id, h.name
HAVING COUNT(s.hacker_id) > 1
ORDER BY count(s.hacker_id) DESC, s.hacker_id ASC;

6. Harry Potter and his friends are at Ollivander's with Ron, finally replacing Charlie's old broken wand.
Hermione decides the best way to choose is by determining the minimum number of gold galleons needed to buy each non-evil wand of high power and age. 
Write a query to print the id, age, coins_needed, and power of the wands that Ron's interested in, sorted in order of descending power. 
If more than one wand has same power, sort the result in order of descending age.

SELECT w.id, p.age, w.coins_needed, w.power
FROM wands AS w
JOIN wands_property AS P
ON w.code = p.code
WHERE p.is_evil = 0 AND w.coins_needed =(SELECT MIN(coins_needed)
FROM wands AS w1
JOIN wands_property AS p1
ON w1.code = p1.code
WHERE w1.power = w.power AND p1.age = p.age)
ORDER BY w.power DESC, p.age DESC;

7. The total score of a hacker is the sum of their maximum scores for all of the challenges. 
Write a query to print the hacker_id, name, and total score of the hackers ordered by the descending score. 
If more than one hacker achieved the same total score, then sort the result by ascending hacker_id. 
Exclude all hackers with a total score of 0 from your result.

SELECT h.hacker_id, h.name, SUM(score) AS total_score
FROM hackers AS h
JOIN (SELECT hacker_id, MAX(score) AS score FROM submissions GROUP BY challenge_id, hacker_id) AS max_score
ON h.hacker_id = max_score.hacker_id
GROUP BY h.hacker_id, name
HAVING total_score > 0
ORDER BY total_score desc, h.hacker_id;


